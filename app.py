import gradio as gr
from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api._errors import (
    TranscriptsDisabled,
    NoTranscriptFound,
    VideoUnavailable,
    TooManyRequests
)

def get_transcript(video_url: str, language_code: str = "en") -> str:
    """
    Fetches transcript legally using youtube-transcript-api.
    Returns formatted transcript or error message.
    """
    try:
        # Extract video ID from URL (handles various URL formats)
        video_id = extract_video_id(video_url)
        if not video_id:
            return "Error: Invalid YouTube URL."

        # Fetch transcript
        transcript = YouTubeTranscriptApi.get_transcript(
            video_id,
            languages=[language_code]
        )
        
        # Format transcript (combine text snippets with timestamps)
        formatted_transcript = []
        for entry in transcript:
            start_time = round(entry['start'], 1)
            text = entry['text']
            formatted_transcript.append(f"[{start_time}s] {text}")
        
        return "\n".join(formatted_transcript)

    except TranscriptsDisabled:
        return "Error: Transcripts are disabled for this video."
    except NoTranscriptFound:
        return "Error: No transcript found for the selected language."
    except VideoUnavailable:
        return "Error: Video is unavailable or private."
    except TooManyRequests:
        return "Error: Too many requests. Try again later."
    except Exception as e:
        return f"Error: {str(e)}"

def extract_video_id(url: str) -> str:
    """Extracts video ID from various YouTube URL formats."""
    import re
    patterns = [
        r"v=([^&]+)",         # Standard ?v=ID
        r"youtu\.be/([^?]+)",  # Short URL
        r"embed/([^/?]+)",     # Embed URL
        r"/([^/?]+)$"          # Vanity URL (no query)
    ]
    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            return match.group(1)
    return ""

# Gradio UI
with gr.Blocks(title="YouTube Transcript Extractor") as app:
    gr.Markdown("""
    ## üìú YouTube Transcript Extractor  
    **Fair Use Notice**:  
    - Only for **personal/educational use**.  
    - Do not redistribute content without permission.  
    """)
    
    with gr.Row():
        video_url = gr.Textbox(
            label="YouTube Video URL",
            placeholder="Paste a YouTube link (e.g., https://youtu.be/...)",
            max_lines=1
        )
        language = gr.Dropdown(
            label="Language",
            choices=["en", "es", "fr", "de", "ja", "auto"],
            value="en"
        )
    
    btn = gr.Button("Get Transcript", variant="primary")
    output = gr.Textbox(
        label="Transcript",
        interactive=True,
        lines=20,
        placeholder="Transcript will appear here..."
    )
    
    # Legal disclaimer
    gr.Markdown("""
    ‚ö†Ô∏è **Disclaimer**:  
    - This tool does **not store** transcripts.  
    - Transcripts are auto-generated by YouTube and may contain errors.  
    - Respect [YouTube's Terms of Service](https://www.youtube.com/t/terms).  
    """)
    
    btn.click(
        fn=get_transcript,
        inputs=[video_url, language],
        outputs=output
    )

if __name__ == "__main__":
    app.launch()